# -*- coding: utf-8 -*-
'''
***************************************************************************
    bkg_geocoder_main.py
    ---------------------
    Date                 : October 2018
    Author               : Christoph Franke
    Copyright            : (C) 2020 by Bundesamt f체r Kartographie und Geod채sie
    Email                : franke at ggr-planung dot de
***************************************************************************
*                                                                         *
*   This program is free software: you can redistribute it and/or modify  *
*   it under the terms of the GNU General Public License as published by  *
*   the Free Software Foundation; either version 3 of the License, or     *
*   (at your option) any later version.                                   *
*                                                                         *
***************************************************************************

main entry point of the plugin, manages the main widget
'''

__author__ = 'Christoph Franke'
__date__ = '30/10/2018'
__copyright__ = 'Copyright 2020, Bundesamt f체r Kartographie und Geod채sie'

from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsMapLayer, QgsVectorLayer
from qgis.gui import QgisInterface
import os.path

# init resources
from .resources import *

from .interface.main_widget import MainWidget


class BKGGeocoderPlugin:
    '''
    Geocoder plugin to use with BKG geocoding API
    '''

    def __init__(self, iface: QgisInterface):
        '''
        Parameters
        ----------
        iface : QgisInterface
            interface to the QGIS UI
        '''

        self.iface = iface
        self.actions = []
        self.menu = '&BKG Geocoder'
        self.toolbar = self.iface.addToolBar(u'BKGGeocoder')
        self.toolbar.setObjectName(u'BKGGeocoder')

        self.canvas = self.iface.mapCanvas()

        self.pluginIsActive = False
        self.mainwidget = None

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        Generated by Plugin Builder:
        http://g-sherman.github.io/Qgis-Plugin-Builder/

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        '''
        override, add entry points (actions) for the plugin
        '''
        # toolbar icon
        icon_path = ':/plugins/bkg_geocoder/icon.png'
        self.add_action(
            icon_path,
            text='BKG Geocoder',
            callback=lambda: self.run(),
            parent=self.iface.mainWindow()
        )
        # open dialog on right click feature in legend
        self.legendAction = self.add_action(
            icon_path,
            text='BKG Geocoder',
            callback=lambda: self.run(
                layer=self.iface.layerTreeView().currentLayer()
                ),
            parent=self.iface,
            add_to_menu=False,
            add_to_toolbar=False
        )
        self.iface.addCustomActionForLayerType(
            self.legendAction, "", QgsMapLayer.VectorLayer, True)

    def onClosePlugin(self):
        '''
        override, close UI on closing plugin
        '''

        # disconnects
        self.mainwidget.closingWidget.disconnect(self.onClosePlugin)
        self.mainwidget.close()

        self.pluginIsActive = False

    def unload(self):
        '''
        remove the plugin and its UI from the QGIS interface
        '''
        for action in self.actions:
            self.iface.removePluginMenu('&BKG Geocoder', action)
            self.iface.removeToolBarIcon(action)
        self.iface.removeCustomActionForLayerType(self.legendAction)
        self.iface.actionPan().trigger()
        # remove the toolbar
        if self.toolbar:
            del self.toolbar
        # remove widget
        if self.mainwidget:
            self.mainwidget.close()
            self.mainwidget.unload()
            self.mainwidget.deleteLater()
            self.mainwidget = None
        self.pluginIsActive = False

    def run(self, layer: QgsVectorLayer = None):
        '''
        open the plugin

        Parameters
        ----------
        layer : QgsVectorLayer
            change the input layer of the plugin to given layer, defaults to not
            changing the selected layer
        '''
        if self.pluginIsActive:
            return

        # initialize and show main widget
        if not self.mainwidget:
            # Create the dockwidget (after translation) and keep reference
            self.mainwidget = MainWidget()

        # connect to provide cleanup on closing of dockwidget
        self.mainwidget.closingWidget.connect(self.onClosePlugin)
        if layer:
            self.mainwidget.change_layer(layer)
        self.mainwidget.show()

